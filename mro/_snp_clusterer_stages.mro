#
# Copyright (c) 2016 10X Genomics, Inc. All rights reserved.
#
filetype bam;
filetype h5;
filetype json;
filetype tsv;
filetype vcf;
filetype vcf.gz;

stage FILTER_MODIFY_BAM(
    in  bam       input,
    in  path      reference_path,
    in  path      bed_file,
    in  tsv       cell_barcodes,
    out bam[]     output_bams,
    out string[]  loci,
    src py     "stages/snpclust/filter_modify_bam",
) split (
    in  string locus,
    in path    genome_fasta,
    out bam    output,
)

stage CALL_SNPS(
    in  path     reference_path,
    in  bam[]    input_bams,
    in  string[] loci,
    out vcf[]    output,
    out vcf.gz   raw_variants,
    src py       "stages/snpclust/call_snps",
) split using (
    in  bam    input,
    in  string locus,
    in  path   genome_fasta,
    out vcf    raw_variant_chunk,
)

stage COUNT_ALLELES(
    in  path   reference_path,
    in  bam[]  input_bams,
    in  vcf[]  variants,
    in  tsv    cell_barcodes,
    in  int    min_snp_call_qual,
    in  int    min_bcs_per_snp,
    in  int    min_snp_obs,
    in  int    min_snp_base_qual,
    in  float  base_error_rate,
    out vcf.gz filtered_variants,
    out h5     raw_allele_bc_matrices_h5,
    out path   raw_allele_bc_matrices_mex,
    out h5     likelihood_allele_bc_matrices_h5,
    out path   likelihood_allele_bc_matrices_mex,
    src py     "stages/snpclust/count_alleles",
) split using (
    in  vcf    chunk_variants,
    in  bam    chunk_bam,
    in  json   snps,
)

stage CLUSTER_CELLS(
    in  path  reference_path,
    in  h5    raw_allele_bc_matrices_h5,
    in  h5    likelihood_allele_bc_matrices_h5,
    in  int   iterations                        "Number of sampling iterations",
    in  int   seed                              "Random seed",
    in  int   burn                              "Number of burn-in iterations",
    in  int   skip                              "Number of iterations to skip for thinning samples",
    in  int   min_depth                         "Minimum depth to use a locus",
    in  float min_posterior                     "Per-cell probability threshold",
    out json  summary,
    src py    "stages/snpclust/cluster_cells",
) split using (
    in  int   seed,
    in  int   components,
    in  int   chain,
)

stage EVALUATE_SNP_CLUSTERS(
    in  json cluster_summary,
    in  json ground_truth,
    out json summary,
    src py   "stages/snpclust/evaluate_snp_clusters",
)

stage SUMMARIZE_REPORTS(
    in  json cluster_summary,
    in  json evaluate_summary,
    out json summary,
    src py   "stages/snpclust/summarize_reports",
)
